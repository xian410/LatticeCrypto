#include <iostream>
#include <time.h>
#include "pke_api.h"
#include "test.h"
#define BREAK_UINT32(var, ByteNum) \
	(uint8)((uint32)(((var) >> ((ByteNum) * 8)) & 0x00FF))
#define BUILD_UINT32(Byte0, Byte1, Byte2, Byte3) \
	((uint32)((uint32)((Byte0) & 0x00FF) + ((uint32)((Byte1) & 0x00FF) << 8) + ((uint32)((Byte2) & 0x00FF) << 16) + ((uint32)((Byte3) & 0x00FF) << 24)))
#define max_word_length 511
#define FAST 0x0f
#define SECURE 0x0e

using namespace std;

namespace code_arithmetic
{

	int grayCode[8] = {0, 1, 3, 2, 7, 6, 4, 5};
	int inverseGrayCode[8][3] = {{0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 1, 0}, {0, 1, 1}, {1, 1, 1}, {1, 0, 1}, {0, 0, 1}};

	unsigned int g_n255d7[max_word_length] = {1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1};
	int d_n255d7 = 24;
	unsigned int g_n255d11[max_word_length] = {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1};
	int d_n255d11 = 40;
	unsigned int g_n511d21[max_word_length] = {1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1};
	int d_n511d21 = 90;

	unsigned int g_n511d7[max_word_length] = {1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1};
	int d_n511d7 = 27;
	unsigned int g_n511d9[max_word_length] = {1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1};
	int d_n511d9 = 36;
	unsigned int g_n511d19[max_word_length] = {1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1};
	int d_n511d19 = 81;

	unsigned int GF256[255][8] = {
			{0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 1}, {1, 0, 1, 1, 0, 0, 1, 0}, {0, 1, 0, 1, 1, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 1, 0}, {0, 1, 0, 0, 1, 1, 1, 1}, {1, 0, 0, 1, 0, 1, 0, 1}, {1, 1, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 1, 1, 1, 0, 0}, {0, 0, 1, 1, 1, 1, 1, 0}, {0, 0, 0, 1, 1, 1, 1, 1}, {1, 0, 1, 1, 1, 1, 0, 1}, {1, 1, 1, 0, 1, 1, 0, 0}, {0, 1, 1, 1, 0, 1, 1, 0}, {0, 0, 1, 1, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 1, 0, 1}, {1, 1, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 0, 0, 0, 0, 0}, {0, 0, 1, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 1, 1}, {1, 0, 1, 1, 0, 0, 1, 1}, {1, 1, 1, 0, 1, 0, 1, 1}, {1, 1, 0, 0, 0, 1, 1, 1}, {1, 1, 0, 1, 0, 0, 0, 1}, {1, 1, 0, 1, 1, 0, 1, 0}, {0, 1, 1, 0, 1, 1, 0, 1}, {1, 0, 0, 0, 0, 1, 0, 0}, {0, 1, 0, 0, 0, 0, 1, 0}, {0, 0, 1, 0, 0, 0, 0, 1}, {1, 0, 1, 0, 0, 0, 1, 0}, {0, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 0, 1, 0}, {0, 1, 0, 0, 1, 1, 0, 1}, {1, 0, 0, 1, 0, 1, 0, 0}, {0, 1, 0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 0, 0, 0, 0}, {0, 1, 0, 1, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 0, 0, 0}, {0, 0, 0, 1, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 1, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 0, 0}, {0, 0, 0, 1, 0, 1, 1, 0}, {0, 0, 0, 0, 1, 0, 1, 1}, {1, 0, 1, 1, 0, 1, 1, 1}, {1, 1, 1, 0, 1, 0, 0, 1}, {1, 1, 0, 0, 0, 1, 1, 0}, {0, 1, 1, 0, 0, 0, 1, 1}, {1, 0, 0, 0, 0, 0, 1, 1}, {1, 1, 1, 1, 0, 0, 1, 1}, {1, 1, 0, 0, 1, 0, 1, 1}, {1, 1, 0, 1, 0, 1, 1, 1}, {1, 1, 0, 1, 1, 0, 0, 1}, {1, 1, 0, 1, 1, 1, 1, 0}, {0, 1, 1, 0, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 1, 0, 1}, {1, 1, 1, 1, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 0, 0}, {0, 0, 1, 1, 1, 1, 0, 0}, {0, 0, 0, 1, 1, 1, 1, 0}, {0, 0, 0, 0, 1, 1, 1, 1}, {1, 0, 1, 1, 0, 1, 0, 1}, {1, 1, 1, 0, 1, 0, 0, 0}, {0, 1, 1, 1, 0, 1, 0, 0}, {0, 0, 1, 1, 1, 0, 1, 0}, {0, 0, 0, 1, 1, 1, 0, 1}, {1, 0, 1, 1, 1, 1, 0, 0}, {0, 1, 0, 1, 1, 1, 1, 0}, {0, 0, 1, 0, 1, 1, 1, 1}, {1, 0, 1, 0, 0, 1, 0, 1}, {1, 1, 1, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 0, 0, 0, 0}, {0, 0, 1, 1, 1, 0, 0, 0}, {0, 0, 0, 1, 1, 1, 0, 0}, {0, 0, 0, 0, 1, 1, 1, 0}, {0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 1, 1, 0, 0, 0, 1}, {1, 1, 1, 0, 1, 0, 1, 0}, {0, 1, 1, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 1, 0, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 1, 1, 1, 0, 1, 0}, {0, 1, 0, 1, 1, 1, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 0}, {0, 1, 0, 0, 1, 1, 1, 0}, {0, 0, 1, 0, 0, 1, 1, 1}, {1, 0, 1, 0, 0, 0, 0, 1}, {1, 1, 1, 0, 0, 0, 1, 0}, {0, 1, 1, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 1, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 1, 0, 0, 0}, {0, 0, 1, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 1, 0}, {0, 0, 0, 0, 1, 0, 0, 1}, {1, 0, 1, 1, 0, 1, 1, 0}, {0, 1, 0, 1, 1, 0, 1, 1}, {1, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 0, 1}, {1, 1, 0, 0, 1, 1, 0, 0}, {0, 1, 1, 0, 0, 1, 1, 0}, {0, 0, 1, 1, 0, 0, 1, 1}, {1, 0, 1, 0, 1, 0, 1, 1}, {1, 1, 1, 0, 0, 1, 1, 1}, {1, 1, 0, 0, 0, 0, 0, 1}, {1, 1, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 0, 0, 0, 1, 1}, {1, 0, 0, 1, 0, 0, 1, 1}, {1, 1, 1, 1, 1, 0, 1, 1}, {1, 1, 0, 0, 1, 1, 1, 1}, {1, 1, 0, 1, 0, 1, 0, 1}, {1, 1, 0, 1, 1, 0, 0, 0}, {0, 1, 1, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 1, 1, 0}, {0, 0, 0, 1, 1, 0, 1, 1}, {1, 0, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 1, 1, 0, 1}, {1, 1, 0, 0, 0, 1, 0, 0}, {0, 1, 1, 0, 0, 0, 1, 0}, {0, 0, 1, 1, 0, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 1, 1, 0, 0, 0}, {0, 1, 0, 0, 1, 1, 0, 0}, {0, 0, 1, 0, 0, 1, 1, 0}, {0, 0, 0, 1, 0, 0, 1, 1}, {1, 0, 1, 1, 1, 0, 1, 1}, {1, 1, 1, 0, 1, 1, 1, 1}, {1, 1, 0, 0, 0, 1, 0, 1}, {1, 1, 0, 1, 0, 0, 0, 0}, {0, 1, 1, 0, 1, 0, 0, 0}, {0, 0, 1, 1, 0, 1, 0, 0}, {0, 0, 0, 1, 1, 0, 1, 0}, {0, 0, 0, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 1, 0, 0}, {0, 1, 0, 1, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 1, 0, 1}, {1, 0, 1, 0, 0, 1, 0, 0}, {0, 1, 0, 1, 0, 0, 1, 0}, {0, 0, 1, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 0, 1, 1, 0}, {0, 1, 0, 1, 0, 0, 1, 1}, {1, 0, 0, 1, 1, 0, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 0, 0, 1, 1, 0, 1}, {1, 1, 0, 1, 0, 1, 0, 0}, {0, 1, 1, 0, 1, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 0, 0}, {0, 1, 0, 1, 0, 1, 0, 0}, {0, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 1, 1, 0, 0, 0}, {0, 1, 0, 1, 1, 1, 0, 0}, {0, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 1, 0, 1, 1, 1}, {1, 0, 1, 1, 1, 0, 0, 1}, {1, 1, 1, 0, 1, 1, 1, 0}, {0, 1, 1, 1, 0, 1, 1, 1}, {1, 0, 0, 0, 1, 0, 0, 1}, {1, 1, 1, 1, 0, 1, 1, 0}, {0, 1, 1, 1, 1, 0, 1, 1}, {1, 0, 0, 0, 1, 1, 1, 1}, {1, 1, 1, 1, 0, 1, 0, 1}, {1, 1, 0, 0, 1, 0, 0, 0}, {0, 1, 1, 0, 0, 1, 0, 0}, {0, 0, 1, 1, 0, 0, 1, 0}, {0, 0, 0, 1, 1, 0, 0, 1}, {1, 0, 1, 1, 1, 1, 1, 0}, {0, 1, 0, 1, 1, 1, 1, 1}, {1, 0, 0, 1, 1, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 0, 0}, {0, 1, 1, 1, 1, 1, 1, 0}, {0, 0, 1, 1, 1, 1, 1, 1}, {1, 0, 1, 0, 1, 1, 0, 1}, {1, 1, 1, 0, 0, 1, 0, 0}, {0, 1, 1, 1, 0, 0, 1, 0}, {0, 0, 1, 1, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 1, 1, 0}, {0, 1, 0, 1, 0, 1, 1, 1}, {1, 0, 0, 1, 1, 0, 0, 1}, {1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 1, 1, 0, 1}, {1, 1, 1, 1, 0, 1, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 0}, {0, 0, 1, 1, 1, 1, 0, 1}, {1, 0, 1, 0, 1, 1, 0, 0}, {0, 1, 0, 1, 0, 1, 1, 0}, {0, 0, 1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 0, 1, 1, 1}, {1, 1, 1, 0, 0, 0, 0, 1}, {1, 1, 0, 0, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 1, 0}, {0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 0, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0}, {0, 1, 0, 0, 1, 0, 1, 1}, {1, 0, 0, 1, 0, 1, 1, 1}, {1, 1, 1, 1, 1, 0, 0, 1}, {1, 1, 0, 0, 1, 1, 1, 0}, {0, 1, 1, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 0, 0, 1, 0}, {0, 1, 1, 1, 1, 0, 0, 1}, {1, 0, 0, 0, 1, 1, 1, 0}, {0, 1, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 1, 0, 0, 0, 1}, {1, 1, 1, 1, 1, 0, 1, 0}, {0, 1, 1, 1, 1, 1, 0, 1}, {1, 0, 0, 0, 1, 1, 0, 0}, {0, 1, 0, 0, 0, 1, 1, 0}, {0, 0, 1, 0, 0, 0, 1, 1}, {1, 0, 1, 0, 0, 0, 1, 1}, {1, 1, 1, 0, 0, 0, 1, 1}, {1, 1, 0, 0, 0, 0, 1, 1}, {1, 1, 0, 1, 0, 0, 1, 1}, {1, 1, 0, 1, 1, 0, 1, 1}, {1, 1, 0, 1, 1, 1, 1, 1}, {1, 1, 0, 1, 1, 1, 0, 1}, {1, 1, 0, 1, 1, 1, 0, 0}, {0, 1, 1, 0, 1, 1, 1, 0}, {0, 0, 1, 1, 0, 1, 1, 1}, {1, 0, 1, 0, 1, 0, 0, 1}, {1, 1, 1, 0, 0, 1, 1, 0}, {0, 1, 1, 1, 0, 0, 1, 1}, {1, 0, 0, 0, 1, 0, 1, 1}, {1, 1, 1, 1, 0, 1, 1, 1}, {1, 1, 0, 0, 1, 0, 0, 1}, {1, 1, 0, 1, 0, 1, 1, 0}, {0, 1, 1, 0, 1, 0, 1, 1}, {1, 0, 0, 0, 0, 1, 1, 1}, {1, 1, 1, 1, 0, 0, 0, 1}, {1, 1, 0, 0, 1, 0, 1, 0}, {0, 1, 1, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 0}};
	// the vector representation of {a,a^2,...,a^255}, where a is a primitive polynomial of GF256

	int GF256_list_to_power[255] = {255, 1, 23, 2, 46, 24, 83, 3, 106, 47, 147, 25, 52, 84, 69, 4, 92, 107, 182, 48, 166, 148, 75, 26, 140, 53, 129, 85, 170, 70, 13, 5, 36, 93, 135, 108, 155, 183, 193, 49, 43, 167, 163, 149, 152, 76, 202, 27, 230, 141, 115, 54, 205, 130, 18, 86, 98, 171, 240, 71, 79, 14, 189, 6, 212, 37, 210, 94, 39, 136, 102, 109, 214, 156, 121, 184, 8, 194, 223, 50, 104, 44, 253, 168, 138, 164, 90, 150, 41, 153, 34, 77, 96, 203, 228, 28, 123, 231, 59, 142, 158, 116, 244, 55, 216, 206, 249, 131, 111, 19, 178, 87, 225, 99, 220, 172, 196, 241, 175, 72, 10, 80, 66, 15, 186, 190, 199, 7, 222, 213, 120, 38, 101, 211, 209, 95, 227, 40, 33, 137, 89, 103, 252, 110, 177, 215, 248, 157, 243, 122, 58, 185, 198, 9, 65, 195, 174, 224, 219, 51, 68, 105, 146, 45, 82, 254, 22, 169, 12, 139, 128, 165, 74, 91, 181, 151, 201, 42, 162, 154, 192, 35, 134, 78, 188, 97, 239, 204, 17, 229, 114, 29, 61, 124, 235, 232, 233, 60, 234, 143, 125, 159, 236, 117, 30, 245, 62, 56, 246, 217, 63, 207, 118, 250, 31, 132, 160, 112, 237, 20, 144, 179, 126, 88, 251, 226, 32, 100, 208, 221, 119, 173, 218, 197, 64, 242, 57, 176, 247, 73, 180, 11, 127, 81, 21, 67, 145, 16, 113, 187, 238, 191, 133, 200, 161};
	// For any c=c0+a*c1+a^2*c2+...+a^7*c7, let i=c0+2c1+4c2+...+2^7c7, and j be the i-th element of the list, then it has c = a^j

	unsigned int GF512[511][9] = {
			{0, 1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 0, 0, 1}, {1, 1, 1, 1, 1, 1, 0, 0, 1}, {1, 1, 0, 1, 0, 1, 1, 0, 1}, {1, 1, 0, 0, 0, 0, 1, 1, 1}, {1, 1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 1, 0, 1, 0, 1}, {1, 1, 1, 0, 0, 1, 0, 1, 1}, {1, 1, 0, 1, 1, 0, 1, 0, 0}, {0, 1, 1, 0, 1, 1, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 0, 1, 1, 1}, {1, 1, 1, 1, 0, 0, 0, 1, 0}, {0, 1, 1, 1, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 0, 0, 1}, {1, 1, 1, 0, 0, 0, 1, 0, 1}, {1, 1, 0, 1, 1, 0, 0, 1, 1}, {1, 1, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 1, 1, 0, 0, 0, 1, 0}, {0, 0, 0, 1, 1, 0, 0, 0, 1}, {1, 0, 1, 0, 0, 1, 0, 0, 1}, {1, 1, 1, 1, 1, 0, 1, 0, 1}, {1, 1, 0, 1, 0, 1, 0, 1, 1}, {1, 1, 0, 0, 0, 0, 1, 0, 0}, {0, 1, 1, 0, 0, 0, 0, 1, 0}, {0, 0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 1, 1, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 0, 0, 0, 0, 1}, {1, 1, 0, 1, 0, 0, 0, 0, 1}, {1, 1, 0, 0, 0, 0, 0, 0, 1}, {1, 1, 0, 0, 1, 0, 0, 0, 1}, {1, 1, 0, 0, 1, 1, 0, 0, 1}, {1, 1, 0, 0, 1, 1, 1, 0, 1}, {1, 1, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 0, 0, 1, 1, 1, 1, 0}, {0, 1, 1, 0, 0, 1, 1, 1, 1}, {1, 0, 0, 1, 1, 0, 1, 1, 0}, {0, 1, 0, 0, 1, 1, 0, 1, 1}, {1, 0, 0, 0, 1, 1, 1, 0, 0}, {0, 1, 0, 0, 0, 1, 1, 1, 0}, {0, 0, 1, 0, 0, 0, 1, 1, 1}, {1, 0, 1, 1, 1, 0, 0, 1, 0}, {0, 1, 0, 1, 1, 1, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0, 1}, {1, 1, 1, 0, 1, 0, 1, 1, 1}, {1, 1, 0, 1, 1, 1, 0, 1, 0}, {0, 1, 1, 0, 1, 1, 1, 0, 1}, {1, 0, 0, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 1, 1, 1, 0}, {0, 1, 1, 1, 0, 0, 1, 1, 1}, {1, 0, 0, 1, 0, 0, 0, 1, 0}, {0, 1, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 1, 0, 0, 1}, {1, 1, 1, 0, 1, 1, 1, 0, 1}, {1, 1, 0, 1, 1, 1, 1, 1, 1}, {1, 1, 0, 0, 0, 1, 1, 1, 0}, {0, 1, 1, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 1, 1, 0, 0, 1, 0}, {0, 1, 0, 0, 1, 1, 0, 0, 1}, {1, 0, 0, 0, 1, 1, 1, 0, 1}, {1, 1, 1, 0, 1, 1, 1, 1, 1}, {1, 1, 0, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 0, 1, 1, 1, 1, 1}, {1, 0, 0, 1, 1, 1, 1, 1, 0}, {0, 1, 0, 0, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 1, 1, 1, 1, 0}, {0, 1, 0, 0, 0, 1, 1, 1, 1}, {1, 0, 0, 0, 1, 0, 1, 1, 0}, {0, 1, 0, 0, 0, 1, 0, 1, 1}, {1, 0, 0, 0, 1, 0, 1, 0, 0}, {0, 1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 1, 1, 0, 0, 1, 1}, {1, 1, 1, 1, 0, 1, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 0, 0}, {0, 0, 1, 1, 1, 1, 0, 1, 0}, {0, 0, 0, 1, 1, 1, 1, 0, 1}, {1, 0, 1, 0, 0, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 0, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 0, 1, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 0}, {0, 1, 0, 0, 1, 0, 1, 1, 0}, {0, 0, 1, 0, 0, 1, 0, 1, 1}, {1, 0, 1, 1, 1, 0, 1, 0, 0}, {0, 1, 0, 1, 1, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 1, 1, 0, 1}, {1, 0, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 0, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 0, 1, 1, 1}, {1, 0, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 1, 0, 1, 1}, {1, 1, 1, 0, 1, 1, 1, 0, 0}, {0, 1, 1, 1, 0, 1, 1, 1, 0}, {0, 0, 1, 1, 1, 0, 1, 1, 1}, {1, 0, 1, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 1, 0, 1, 1}, {1, 1, 1, 0, 1, 0, 1, 0, 0}, {0, 1, 1, 1, 0, 1, 0, 1, 0}, {0, 0, 1, 1, 1, 0, 1, 0, 1}, {1, 0, 1, 1, 0, 1, 0, 1, 1}, {1, 1, 1, 1, 0, 0, 1, 0, 0}, {0, 1, 1, 1, 1, 0, 0, 1, 0}, {0, 0, 1, 1, 1, 1, 0, 0, 1}, {1, 0, 1, 1, 0, 1, 1, 0, 1}, {1, 1, 1, 1, 0, 0, 1, 1, 1}, {1, 1, 0, 1, 0, 0, 0, 1, 0}, {0, 1, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 0, 1}, {1, 1, 1, 0, 0, 1, 1, 0, 1}, {1, 1, 0, 1, 1, 0, 1, 1, 1}, {1, 1, 0, 0, 0, 1, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 1, 1, 0, 0, 1, 1}, {1, 1, 1, 0, 0, 1, 0, 0, 0}, {0, 1, 1, 1, 0, 0, 1, 0, 0}, {0, 0, 1, 1, 1, 0, 0, 1, 0}, {0, 0, 0, 1, 1, 1, 0, 0, 1}, {1, 0, 1, 0, 0, 1, 1, 0, 1}, {1, 1, 1, 1, 1, 0, 1, 1, 1}, {1, 1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 1, 1}, {1, 1, 1, 0, 0, 1, 1, 0, 0}, {0, 1, 1, 1, 0, 0, 1, 1, 0}, {0, 0, 1, 1, 1, 0, 0, 1, 1}, {1, 0, 1, 1, 0, 1, 0, 0, 0}, {0, 1, 0, 1, 1, 0, 1, 0, 0}, {0, 0, 1, 0, 1, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 1, 0, 1}, {1, 0, 1, 0, 0, 0, 1, 1, 1}, {1, 1, 1, 1, 1, 0, 0, 1, 0}, {0, 1, 1, 1, 1, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 1}, {1, 1, 1, 0, 0, 0, 1, 1, 1}, {1, 1, 0, 1, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 1, 1, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 1, 0, 1}, {1, 1, 1, 0, 0, 1, 1, 1, 1}, {1, 1, 0, 1, 1, 0, 1, 1, 0}, {0, 1, 1, 0, 1, 1, 0, 1, 1}, {1, 0, 0, 1, 1, 1, 1, 0, 0}, {0, 1, 0, 0, 1, 1, 1, 1, 0}, {0, 0, 1, 0, 0, 1, 1, 1, 1}, {1, 0, 1, 1, 1, 0, 1, 1, 0}, {0, 1, 0, 1, 1, 1, 0, 1, 1}, {1, 0, 0, 0, 0, 1, 1, 0, 0}, {0, 1, 0, 0, 0, 0, 1, 1, 0}, {0, 0, 1, 0, 0, 0, 0, 1, 1}, {1, 0, 1, 1, 1, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 1, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 1, 0, 0}, {0, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 0, 1, 0, 1, 1, 1}, {1, 0, 1, 0, 1, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 1, 1, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 1, 0, 1}, {1, 1, 1, 0, 0, 0, 0, 1, 1}, {1, 1, 0, 1, 1, 0, 0, 0, 0}, {0, 1, 1, 0, 1, 1, 0, 0, 0}, {0, 0, 1, 1, 0, 1, 1, 0, 0}, {0, 0, 0, 1, 1, 0, 1, 1, 0}, {0, 0, 0, 0, 1, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 1, 1, 0, 0}, {0, 1, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 1, 0, 1, 0, 1, 1, 1}, {1, 0, 1, 1, 1, 1, 0, 1, 0}, {0, 1, 0, 1, 1, 1, 1, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 1, 1}, {1, 1, 1, 0, 1, 0, 1, 1, 0}, {0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 0, 0, 1, 0, 0, 1, 0, 0}, {0, 1, 0, 0, 1, 0, 0, 1, 0}, {0, 0, 1, 0, 0, 1, 0, 0, 1}, {1, 0, 1, 1, 1, 0, 1, 0, 1}, {1, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 1, 0, 1, 0, 0, 1, 0, 0}, {0, 1, 1, 0, 1, 0, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 1, 1, 0, 0, 1, 0, 1}, {1, 1, 1, 1, 0, 0, 0, 1, 1}, {1, 1, 0, 1, 0, 0, 0, 0, 0}, {0, 1, 1, 0, 1, 0, 0, 0, 0}, {0, 0, 1, 1, 0, 1, 0, 0, 0}, {0, 0, 0, 1, 1, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 0, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 0, 1, 1, 0}, {0, 1, 1, 1, 0, 0, 0, 1, 1}, {1, 0, 0, 1, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 0, 1, 1}, {1, 1, 0, 1, 0, 1, 1, 0, 0}, {0, 1, 1, 0, 1, 0, 1, 1, 0}, {0, 0, 1, 1, 0, 1, 0, 1, 1}, {1, 0, 1, 1, 0, 0, 1, 0, 0}, {0, 1, 0, 1, 1, 0, 0, 1, 0}, {0, 0, 1, 0, 1, 1, 0, 0, 1}, {1, 0, 1, 1, 1, 1, 1, 0, 1}, {1, 1, 1, 1, 0, 1, 1, 1, 1}, {1, 1, 0, 1, 0, 0, 1, 1, 0}, {0, 1, 1, 0, 1, 0, 0, 1, 1}, {1, 0, 0, 1, 1, 1, 0, 0, 0}, {0, 1, 0, 0, 1, 1, 1, 0, 0}, {0, 0, 1, 0, 0, 1, 1, 1, 0}, {0, 0, 0, 1, 0, 0, 1, 1, 1}, {1, 0, 1, 0, 0, 0, 0, 1, 0}, {0, 1, 0, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 1}, {1, 1, 1, 0, 1, 0, 0, 0, 1}, {1, 1, 0, 1, 1, 1, 0, 0, 1}, {1, 1, 0, 0, 0, 1, 1, 0, 1}, {1, 1, 0, 0, 1, 0, 1, 1, 1}, {1, 1, 0, 0, 1, 1, 0, 1, 0}, {0, 1, 1, 0, 0, 1, 1, 0, 1}, {1, 0, 0, 1, 1, 0, 1, 1, 1}, {1, 1, 1, 0, 0, 1, 0, 1, 0}, {0, 1, 1, 1, 0, 0, 1, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 1, 1}, {1, 1, 1, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 0, 0, 0, 0, 0}, {0, 0, 1, 1, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 1, 0, 1, 0, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 1, 0, 1}, {1, 1, 1, 0, 1, 0, 0, 1, 1}, {1, 1, 0, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 0, 1, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 1, 1, 0, 1, 1, 1}, {1, 0, 1, 0, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 1, 1}, {1, 1, 1, 0, 1, 0, 0, 0, 0}, {0, 1, 1, 1, 0, 1, 0, 0, 0}, {0, 0, 1, 1, 1, 0, 1, 0, 0}, {0, 0, 0, 1, 1, 1, 0, 1, 0}, {0, 0, 0, 0, 1, 1, 1, 0, 1}, {1, 0, 1, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 1, 0, 0, 1, 0, 1, 1, 1}, {1, 0, 0, 0, 1, 1, 0, 1, 0}, {0, 1, 0, 0, 0, 1, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 1, 1}, {1, 1, 1, 0, 1, 1, 0, 1, 0}, {0, 1, 1, 1, 0, 1, 1, 0, 1}, {1, 0, 0, 1, 0, 0, 1, 1, 1}, {1, 1, 1, 0, 0, 0, 0, 1, 0}, {0, 1, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 0, 1}, {1, 1, 1, 0, 0, 0, 0, 0, 1}, {1, 1, 0, 1, 1, 0, 0, 0, 1}, {1, 1, 0, 0, 0, 1, 0, 0, 1}, {1, 1, 0, 0, 1, 0, 1, 0, 1}, {1, 1, 0, 0, 1, 1, 0, 1, 1}, {1, 1, 0, 0, 1, 1, 1, 0, 0}, {0, 1, 1, 0, 0, 1, 1, 1, 0}, {0, 0, 1, 1, 0, 0, 1, 1, 1}, {1, 0, 1, 1, 0, 0, 0, 1, 0}, {0, 1, 0, 1, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 0, 0, 1}, {1, 1, 1, 0, 1, 0, 1, 0, 1}, {1, 1, 0, 1, 1, 1, 0, 1, 1}, {1, 1, 0, 0, 0, 1, 1, 0, 0}, {0, 1, 1, 0, 0, 0, 1, 1, 0}, {0, 0, 1, 1, 0, 0, 0, 1, 1}, {1, 0, 1, 1, 0, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 0, 0, 0}, {0, 0, 0, 1, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 1, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 0, 1, 0, 0}, {0, 1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 1, 1, 1, 0, 1, 1}, {1, 1, 1, 1, 0, 1, 1, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 1, 0}, {0, 0, 1, 1, 1, 1, 0, 1, 1}, {1, 0, 1, 1, 0, 1, 1, 0, 0}, {0, 1, 0, 1, 1, 0, 1, 1, 0}, {0, 0, 1, 0, 1, 1, 0, 1, 1}, {1, 0, 1, 1, 1, 1, 1, 0, 0}, {0, 1, 0, 1, 1, 1, 1, 1, 0}, {0, 0, 1, 0, 1, 1, 1, 1, 1}, {1, 0, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 0, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 1, 1, 1, 0}, {0, 1, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 0, 0, 0, 1, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0, 1}, {1, 1, 1, 0, 1, 1, 0, 1, 1}, {1, 1, 0, 1, 1, 1, 1, 0, 0}, {0, 1, 1, 0, 1, 1, 1, 1, 0}, {0, 0, 1, 1, 0, 1, 1, 1, 1}, {1, 0, 1, 1, 0, 0, 1, 1, 0}, {0, 1, 0, 1, 1, 0, 0, 1, 1}, {1, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 1}, {1, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 1, 0, 0, 0, 1}, {1, 1, 0, 1, 0, 1, 0, 0, 1}, {1, 1, 0, 0, 0, 0, 1, 0, 1}, {1, 1, 0, 0, 1, 0, 0, 1, 1}, {1, 1, 0, 0, 1, 1, 0, 0, 0}, {0, 1, 1, 0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 0, 1, 1, 0}, {0, 0, 0, 1, 1, 0, 0, 1, 1}, {1, 0, 1, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 1, 0, 0, 1, 0, 0}, {0, 0, 1, 0, 1, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 0, 0, 1, 0, 1}, {1, 1, 1, 1, 1, 0, 0, 1, 1}, {1, 1, 0, 1, 0, 1, 0, 0, 0}, {0, 1, 1, 0, 1, 0, 1, 0, 0}, {0, 0, 1, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 0, 1, 0, 1, 1}, {1, 1, 1, 1, 1, 0, 1, 0, 0}, {0, 1, 1, 1, 1, 1, 0, 1, 0}, {0, 0, 1, 1, 1, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 1, 1, 1, 1}, {1, 1, 1, 1, 0, 0, 1, 1, 0}, {0, 1, 1, 1, 1, 0, 0, 1, 1}, {1, 0, 0, 1, 0, 1, 0, 0, 0}, {0, 1, 0, 0, 1, 0, 1, 0, 0}, {0, 0, 1, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 0, 0, 0, 1, 1}, {1, 1, 1, 1, 1, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 1, 0, 0, 0}, {0, 0, 1, 1, 1, 1, 1, 0, 0}, {0, 0, 0, 1, 1, 1, 1, 1, 0}, {0, 0, 0, 0, 1, 1, 1, 1, 1}, {1, 0, 1, 0, 1, 1, 1, 1, 0}, {0, 1, 0, 1, 0, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 0, 0, 0, 0, 1, 1}, {1, 0, 0, 0, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 1, 0, 1, 1, 0, 0, 1}, {1, 1, 1, 1, 1, 1, 1, 0, 1}, {1, 1, 0, 1, 0, 1, 1, 1, 1}, {1, 1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1, 1}, {1, 0, 0, 1, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 1, 0, 0, 1, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 1, 0, 0, 1, 1}, {1, 0, 1, 0, 1, 1, 0, 0, 0}, {0, 1, 0, 1, 0, 1, 1, 0, 0}, {0, 0, 1, 0, 1, 0, 1, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 0, 0, 1, 0, 0}, {0, 1, 0, 1, 0, 0, 0, 1, 0}, {0, 0, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 1, 1, 1, 1, 0, 0, 1}, {1, 1, 1, 1, 0, 1, 1, 0, 1}, {1, 1, 0, 1, 0, 0, 1, 1, 1}, {1, 1, 0, 0, 0, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 0, 0, 0, 1}, {1, 1, 1, 0, 0, 1, 0, 0, 1}, {1, 1, 0, 1, 1, 0, 1, 0, 1}, {1, 1, 0, 0, 0, 1, 0, 1, 1}, {1, 1, 0, 0, 1, 0, 1, 0, 0}, {0, 1, 1, 0, 0, 1, 0, 1, 0}, {0, 0, 1, 1, 0, 0, 1, 0, 1}, {1, 0, 1, 1, 0, 0, 0, 1, 1}, {1, 1, 1, 1, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 0, 0, 0}, {0, 0, 1, 1, 1, 1, 0, 0, 0}, {0, 0, 0, 1, 1, 1, 1, 0, 0}, {0, 0, 0, 0, 1, 1, 1, 1, 0}, {0, 0, 0, 0, 0, 1, 1, 1, 1}, {1, 0, 1, 0, 1, 0, 1, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1, 1}, {1, 0, 0, 0, 0, 0, 1, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 1, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 1, 1, 1, 0, 0, 0, 1}, {1, 1, 1, 1, 0, 1, 0, 0, 1}, {1, 1, 0, 1, 0, 0, 1, 0, 1}, {1, 1, 0, 0, 0, 0, 0, 1, 1}, {1, 1, 0, 0, 1, 0, 0, 0, 0}, {0, 1, 1, 0, 0, 1, 0, 0, 0}, {0, 0, 1, 1, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 1, 0, 0, 1, 0}, {0, 0, 0, 0, 1, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 1, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 0, 1, 0, 1, 1, 1, 0}, {0, 1, 1, 0, 1, 0, 1, 1, 1}, {1, 0, 0, 1, 1, 1, 0, 1, 0}, {0, 1, 0, 0, 1, 1, 1, 0, 1}, {1, 0, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 0, 1, 1, 1, 1}, {1, 0, 0, 1, 0, 0, 1, 1, 0}, {0, 1, 0, 0, 1, 0, 0, 1, 1}, {1, 0, 0, 0, 1, 1, 0, 0, 0}, {0, 1, 0, 0, 0, 1, 1, 0, 0}, {0, 0, 1, 0, 0, 0, 1, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 1, 1}, {1, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 0, 1, 1}, {1, 1, 1, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 1, 1, 1, 1, 0, 0}, {0, 0, 1, 1, 1, 1, 1, 1, 0}, {0, 0, 0, 1, 1, 1, 1, 1, 1}, {1, 0, 1, 0, 0, 1, 1, 1, 0}, {0, 1, 0, 1, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 1, 0}, {0, 1, 0, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 0, 0, 1}, {1, 1, 1, 0, 1, 1, 0, 0, 1}, {1, 1, 0, 1, 1, 1, 1, 0, 1}, {1, 1, 0, 0, 0, 1, 1, 1, 1}, {1, 1, 0, 0, 1, 0, 1, 1, 0}, {0, 1, 1, 0, 0, 1, 0, 1, 1}, {1, 0, 0, 1, 1, 0, 1, 0, 0}, {0, 1, 0, 0, 1, 1, 0, 1, 0}, {0, 0, 1, 0, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 1, 0, 1, 1, 1}, {1, 1, 1, 1, 0, 1, 0, 1, 0}, {0, 1, 1, 1, 1, 0, 1, 0, 1}, {1, 0, 0, 1, 0, 1, 0, 1, 1}, {1, 1, 1, 0, 0, 0, 1, 0, 0}, {0, 1, 1, 1, 0, 0, 0, 1, 0}, {0, 0, 1, 1, 1, 0, 0, 0, 1}, {1, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 1, 1, 1, 0, 0, 1, 0, 1}, {1, 1, 0, 1, 0, 0, 0, 1, 1}, {1, 1, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 1}, {1, 0, 1, 0, 1, 0, 0, 0, 0}, {0, 1, 0, 1, 0, 1, 0, 0, 0}, {0, 0, 1, 0, 1, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 1, 0, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 0, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 0, 1, 1, 1, 1, 1, 1, 1}, {1, 0, 1, 1, 0, 1, 1, 1, 0}, {0, 1, 0, 1, 1, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 1, 0, 1, 0}, {0, 1, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 0, 1, 1}, {1, 1, 1, 0, 1, 1, 0, 0, 0}, {0, 1, 1, 1, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 1, 0, 1, 1, 0}, {0, 0, 0, 1, 1, 1, 0, 1, 1}, {1, 0, 1, 0, 0, 1, 1, 0, 0}, {0, 1, 0, 1, 0, 0, 1, 1, 0}, {0, 0, 1, 0, 1, 0, 0, 1, 1}, {1, 0, 1, 1, 1, 1, 0, 0, 0}, {0, 1, 0, 1, 1, 1, 1, 0, 0}, {0, 0, 1, 0, 1, 1, 1, 1, 0}, {0, 0, 0, 1, 0, 1, 1, 1, 1}, {1, 0, 1, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 1, 0, 0, 0, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 0}};
	// the vector representation of {a,a^2,...,a^511}, where a is a primitive polynomial of GF512

	int GF512_list_to_power[511] = {511, 1, 476, 2, 441, 477, 242, 3, 207, 442, 195, 478, 295, 243, 406, 4, 371, 208, 421, 443, 484, 196, 260, 479, 381, 296, 172, 244, 160, 407, 362, 5, 327, 372, 26, 209, 340, 422, 125, 444, 357, 485, 346, 197, 137, 261, 83, 480, 437, 382, 336, 297, 386, 173, 498, 245, 225, 161, 253, 408, 505, 363, 449, 6, 414, 328, 33, 373, 390, 27, 470, 210, 185, 341, 190, 423, 218, 126, 112, 445, 79, 358, 402, 486, 301, 347, 108, 198, 463, 138, 17, 262, 93, 84, 351, 481, 157, 438, 292, 383, 502, 337, 134, 298, 90, 387, 215, 174, 308, 499, 305, 246, 48, 226, 284, 162, 177, 254, 102, 409, 152, 506, 322, 364, 311, 450, 490, 7, 455, 415, 396, 329, 229, 34, 276, 374, 60, 391, 117, 28, 287, 471, 21, 211, 318, 186, 13, 342, 249, 191, 168, 424, 67, 219, 146, 127, 51, 113, 142, 446, 495, 80, 122, 359, 257, 403, 239, 487, 99, 302, 131, 348, 105, 109, 467, 199, 270, 464, 236, 139, 165, 18, 273, 263, 430, 94, 55, 85, 180, 352, 202, 482, 369, 158, 379, 439, 509, 293, 205, 384, 435, 503, 223, 338, 325, 135, 355, 299, 77, 91, 461, 388, 412, 216, 183, 175, 46, 309, 150, 500, 155, 306, 88, 247, 316, 49, 65, 227, 453, 285, 58, 163, 268, 178, 428, 255, 493, 103, 97, 410, 75, 153, 44, 507, 367, 323, 433, 365, 73, 312, 71, 451, 314, 491, 266, 8, 231, 456, 39, 416, 331, 397, 279, 330, 278, 230, 38, 35, 36, 277, 37, 375, 457, 61, 40, 392, 9, 118, 232, 29, 398, 288, 280, 472, 417, 22, 332, 212, 289, 319, 281, 187, 30, 14, 399, 343, 23, 250, 333, 192, 473, 169, 418, 425, 62, 68, 41, 220, 376, 147, 458, 128, 119, 52, 233, 114, 393, 143, 10, 447, 251, 496, 334, 81, 344, 123, 24, 360, 170, 258, 419, 404, 193, 240, 474, 488, 320, 100, 282, 303, 213, 132, 290, 349, 15, 106, 400, 110, 188, 468, 31, 200, 53, 271, 234, 465, 129, 237, 120, 140, 144, 166, 11, 19, 115, 274, 394, 264, 69, 431, 42, 95, 426, 56, 63, 86, 148, 181, 459, 353, 221, 203, 377, 483, 259, 370, 420, 159, 361, 380, 171, 440, 241, 510, 475, 294, 405, 206, 194, 385, 497, 436, 335, 504, 448, 224, 252, 339, 124, 326, 25, 136, 82, 356, 345, 300, 107, 78, 401, 92, 350, 462, 16, 389, 469, 413, 32, 217, 111, 184, 189, 176, 101, 47, 283, 310, 489, 151, 321, 501, 133, 156, 291, 307, 304, 89, 214, 248, 167, 317, 12, 50, 141, 66, 145, 228, 275, 454, 395, 286, 20, 59, 116, 164, 272, 269, 235, 179, 201, 429, 54, 256, 238, 494, 121, 104, 466, 98, 130, 411, 182, 76, 460, 154, 87, 45, 149, 508, 204, 368, 378, 324, 354, 434, 222, 366, 432, 74, 43, 313, 265, 72, 70, 452, 57, 315, 64, 492, 96, 267, 427};
	// For any c=c0+a*c1+a^2*c2+...+a^7*c7+a^8*c8, let i=c0+2c1+4c2+...+2^8c8, and j be the i-th element of the list, then it has c = a^j

	int polynomialMul(unsigned int *p1, int n1, unsigned int *p2, int n2, unsigned int *p3, int &n3, int nc = max_word_length) // set p3(x) = p1(x)*p2(x) mod(x^nc-1); deg p1=n1, deg p2=n2, deg p3=n3.
	{
		// p3_i = sum_{j=0}^n1 p1_j*p2_{i-j}
		for (int i = 0; i < nc; i++)
			p3[i] = 0;

		for (int i1 = 0; i1 <= n1; i1++)
		{
			if (p1[i1] == 0)
				continue;
			for (int i2 = 0; i2 <= n2; i2++)
			{
				if (p2[i2] == 0)
					continue;

				// if p1[i1]=1 and p2[i2]=1
				if (i1 + i2 < nc)
					p3[i1 + i2]++;
				else
					p3[i1 + i2 - nc]++;
			}
		}

		n3 = 0;
		for (int i = 0; i < nc; i++)
		{
			p3[i] = p3[i] % 2;

			if (p3[i] != 0 && n3 < i)
				n3 = i;
		}

		return 0;
	}

	int polynomialRem(unsigned int *p1, int n1, unsigned int *p2, int n2, unsigned int *p3, int &n3) // p1(x)=f(x)*p2(x)+p3(x), deg p3<deg p2;
	{
		for (int i = 0; i <= n1; i++)
			p3[i] = p1[i];

		for (int i = n1; i >= n2; i--)
		{
			if (p3[i] == 0)
				continue;

			for (int j = i; j >= i - n2; j--)
				p3[j] = p3[j] ^ p2[j - i + n2];
		}

		n3 = 0;
		for (int i = 0; i < n2; i++)
			if (p3[i] != 0 && n3 < i)
				n3 = i;

		return 0;
	}
	/*
	g�����ɶ���ʽ��dg�����ɶ���ʽ��ϵ����u����Ϣ����ʽ��du����Ϣ����ʽ��ϵ����v����������֣�dv�����ֶ���ʽ��ϵ��
	 */
	int encoder(unsigned int *g, int dg, unsigned int *u, int du, unsigned int *v, int &dv) // input g enerator polynomial g(x), message u(x), output a codeword v(x) such that the lastest du bits are the message u
	{
		unsigned int tmp[max_word_length];
		// tmp(x)=x^(dg+1)*u(x)
		for (int i = 0; i < max_word_length; i++)
		{
			if (i < dg || i > du + dg)
				tmp[i] = 0;
			else
				tmp[i] = u[i - dg];
		}

		// dv(x)=Rem(tmp(x),g(x))  ����
		code_arithmetic::polynomialRem(tmp, du + dg, g, dg, v, dv);

		// dv(x)=dv(x)+tmp(x)
		for (int i = dg; i <= du + dg; i++)
			v[i] = tmp[i];
		dv = dg + du;

		return 0;
	}
	/*
	 * gΪ���ɶ���ʽ��m�ǰ�����������ֶ���ʽ��nc�����ֳ��ȣ�255����511����dg�����ɶ���ʽ�Ĵ���
	 * dm�����ֶ���ʽ�Ĵ�����tΪ����뾶
	 */
	int decoder(unsigned int *g, unsigned int *m, int nc, int dg, int dm, int t) // input the generator polynomail g, the message polynomial m with errors, the code length nc (=255 or 511), the degree of the message polynomial dm, the decoding radius t; set m to be the corrected message; return -1 if decode fails
	{
		// Step1: compute the syndrome {s1=m(a^1),...,s2t=m(a^2t)}, where each si is a element in GF(256) or GF(511), reprented in vector form
		// �������ֶ���ʽ�������ɶ���ʽ��������ȷ�������п��ܴ��ڵĴ���
		/*compute the reminder of m(x)/g(x)*/
		// rem�洢���ֶ���ʽ�������ɶ���ʽ������
		unsigned int rem[max_word_length];
		int drem;
		code_arithmetic::polynomialRem(m, dm, g, dg, rem, drem);

		/*DEBUG*/
		/*
		for(int i=0;i<=dm;i++)
		cout<<m[i]<<", ";
		cout<<endl;
		for(int i=0;i<=dg;i++)
		cout<<g[i]<<", ";
		cout<<endl;
		for(int i=0;i<=drem;i++)
		cout<<rem[i]<<", ";
		cout<<endl;
		*/
		/*DEBUG*/

		/*compute the syndrome*/
		// ����ÿ��i��1��2t��������m(X)��a^i��ֵ������a���������ԭʼ������Щֵ���ڼ��Ͷ�λ����
		// �洢syndrome��
		unsigned int(*S)[9] = new unsigned int[2 * t + 1][9]; // syndromes are set to be S[1],...,S[2t]

		// t�ǽ���뾶
		for (int i = 1; i <= 2 * t; i++)
		{
			for (int j = 0; j <= 8; j++)
				S[i][j] = 0;

			/*compute rem(a^i) = sum(rem_j*a^ij)*/
			for (int j = 0; j <= drem; j++)
			{
				if (rem[j] == 0)
					continue;

				/*compute a^ij*/
				int deg = (i * j - 1) % nc + 1;

				if (nc == 255)
					for (int ti = 0; ti < 8; ti++)
						S[i][ti] = S[i][ti] ^ code_arithmetic::GF256[deg - 1][ti];

				if (nc == 511)
					for (int ti = 0; ti < 9; ti++)
						S[i][ti] = S[i][ti] ^ code_arithmetic::GF512[deg - 1][ti];
			}
		}

		/*DEBUG*/
		/*
		for(int i=0;i<2*t+1;i++)
		{
		for(int j=0;j<9;j++)
		cout<<S[i][j]<<", ";
		cout<<endl;
		}
		*/
		/*DEBUG*/

		// Step 2: compute the error locator polynomial via BM algorithm
		// ʹ��Berlekamp-Massey�㷨�������λ����ʽ
		unsigned int poly_c[max_word_length][9];
		unsigned int poly_b[max_word_length][9];

		for (int i = 0; i < max_word_length; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				poly_b[i][j] = 0;
				poly_c[i][j] = 0;
			}
		}
		// BM�㷨����������ʽ
		poly_b[0][0] = 1;
		poly_c[0][0] = 1;
		// ���ڴ洢��һ�κ͵�ǰ�Ĳ���ֵ
		unsigned int last_discrepancy[9]; // field b=1
		unsigned int discrepancy[9];			// field d
		for (int j = 0; j < 9; j++)
		{
			last_discrepancy[j] = 0;
			discrepancy[j] = 0;
		}
		last_discrepancy[0] = 1;

		int num_of_errors = 0; // L
		int tm = 1;
		int tn = 0;

		/*tmp varables*/
		int tmp1 = 0;
		int tmp2 = 0;
		int tmpd1 = 0;
		int tmpd2 = 0;
		unsigned int poly_t[max_word_length][9];

		for (tn = 0; tn < 2 * t; tn++)
		{
			/*d = s_{tn+1} + sum_{i=1}^L c_i*s_{tn-i+1}*/
			if (nc == 255)
			{
				for (int j = 0; j < 8; j++)
					discrepancy[j] = S[tn + 1][j];

				for (int i = 1; i <= num_of_errors; i++)
				{
					if (i > tn)
						break;

					/*compute c_i*s_{tn-i+1}, then add to d*/
					tmp1 = poly_c[i][0] + 2 * poly_c[i][1] + 4 * poly_c[i][2] + 8 * poly_c[i][3] + 16 * poly_c[i][4] + 32 * poly_c[i][5] + 64 * poly_c[i][6] + 128 * poly_c[i][7];
					tmp2 = S[tn - i + 1][0] + 2 * S[tn - i + 1][1] + 4 * S[tn - i + 1][2] + 8 * S[tn - i + 1][3] + 16 * S[tn - i + 1][4] + 32 * S[tn - i + 1][5] + 64 * S[tn - i + 1][6] + 128 * S[tn - i + 1][7];
					if (tmp1 == 0 && tmp2 == 0)
						continue;
					else
					{
						tmpd1 = code_arithmetic::GF256_list_to_power[tmp1 - 1]; // set c_i=a^tmpd1
						tmpd2 = code_arithmetic::GF256_list_to_power[tmp2 - 1]; // set S_{tn-i+1}=a^tmpd2
						tmpd1 = (tmpd1 + tmpd2 - 1) % 255 + 1;
						for (int j = 0; j < 8; j++)
							discrepancy[j] = discrepancy[j] ^ code_arithmetic::GF256[tmpd1 - 1][j];
					}
				}
			}

			if (nc == 511)
			{
				for (int j = 0; j < 9; j++)
					discrepancy[j] = S[tn + 1][j];

				for (int i = 1; i <= num_of_errors; i++)
				{
					if (i > tn)
						break;

					/*compute c_i*s_{tn-i+1}, then add to d*/
					tmp1 = poly_c[i][0] + 2 * poly_c[i][1] + 4 * poly_c[i][2] + 8 * poly_c[i][3] + 16 * poly_c[i][4] + 32 * poly_c[i][5] + 64 * poly_c[i][6] + 128 * poly_c[i][7] + 256 * poly_c[i][8];
					tmp2 = S[tn - i + 1][0] + 2 * S[tn - i + 1][1] + 4 * S[tn - i + 1][2] + 8 * S[tn - i + 1][3] + 16 * S[tn - i + 1][4] + 32 * S[tn - i + 1][5] + 64 * S[tn - i + 1][6] + 128 * S[tn - i + 1][7] + 256 * S[tn - i + 1][8];
					if (tmp1 == 0 && tmp2 == 0)
						continue;
					else
					{
						tmpd1 = code_arithmetic::GF512_list_to_power[tmp1 - 1]; // set c_i=a^tmpd1
						tmpd2 = code_arithmetic::GF512_list_to_power[tmp2 - 1]; // set S_{tn-i+1}=a^tmpd2
						tmpd1 = (tmpd1 + tmpd2 - 1) % 511 + 1;
						for (int j = 0; j < 9; j++)
							discrepancy[j] = discrepancy[j] ^ code_arithmetic::GF512[tmpd1 - 1][j];
					}
				}
			}

			/*update according to the discrepancy*/
			tmp1 = tmp2 = 0;
			for (int j = 0; j < 8; j++)
				tmp1 = tmp1 + (discrepancy[j] << j);
			tmp2 = tmp1 + (discrepancy[8] << 8);

			if ((nc == 255 && tmp1 == 0) || (nc == 511 && tmp2 == 0))
			{
				tm = tm + 1;
			}
			else if (2 * num_of_errors <= tn)
			{
				for (int tl = 0; tl < max_word_length; tl++)
					for (int tj = 0; tj < 9; tj++)
						poly_t[tl][tj] = poly_c[tl][tj];

				/*c(x) = c(x) - d b^(-1) x^m B(x)*/
				if (nc == 255)
				{
					tmpd1 = code_arithmetic::GF256_list_to_power[tmp1 - 1]; // d

					tmp1 = 0;
					for (int j = 0; j < 8; j++)
						tmp1 = tmp1 + (last_discrepancy[j] << j);
					tmpd1 = tmpd1 - code_arithmetic::GF256_list_to_power[tmp1 - 1]; // b^-1

					for (int tl = tm; tl < max_word_length; tl++)
					{
						tmp1 = 0;
						for (int j = 0; j < 8; j++)
							tmp1 = tmp1 + (poly_b[tl - tm][j] << j);
						if (tmp1 == 0)
							continue;

						tmpd2 = (tmpd1 + code_arithmetic::GF256_list_to_power[tmp1 - 1] - 1) % 255 + 1; // B_{tl-m}

						for (int j = 0; j < 8; j++)
							poly_c[tl][j] = poly_c[tl][j] ^ code_arithmetic::GF256[tmpd2 - 1][j];
					}
				}

				if (nc == 511)
				{
					tmpd1 = code_arithmetic::GF512_list_to_power[tmp2 - 1]; // d

					tmp1 = 0;
					for (int j = 0; j < 9; j++)
						tmp1 = tmp1 + (last_discrepancy[j] << j);
					tmpd1 = tmpd1 - code_arithmetic::GF512_list_to_power[tmp1 - 1]; // b^-1

					for (int tl = tm; tl < max_word_length; tl++)
					{
						tmp1 = 0;
						for (int j = 0; j < 9; j++)
							tmp1 = tmp1 + (poly_b[tl - tm][j] << j);
						if (tmp1 == 0)
							continue;

						tmpd2 = (tmpd1 + code_arithmetic::GF512_list_to_power[tmp1 - 1] - 1) % 511 + 1; // B_{tl-m}

						for (int j = 0; j < 9; j++)
							poly_c[tl][j] = poly_c[tl][j] ^ code_arithmetic::GF512[tmpd2 - 1][j];
					}
				}

				num_of_errors = tn + 1 - num_of_errors;

				for (int tl = 0; tl < max_word_length; tl++)
					for (int tj = 0; tj < 9; tj++)
						poly_b[tl][tj] = poly_t[tl][tj];

				for (int j = 0; j < 9; j++)
					last_discrepancy[j] = discrepancy[j];

				tm = 1;
			}
			else
			{
				/*c(x) = c(x) - d b^(-1) x^m B(x)*/
				if (nc == 255)
				{
					tmpd1 = code_arithmetic::GF256_list_to_power[tmp1 - 1]; // d

					tmp1 = 0;
					for (int j = 0; j < 8; j++)
						tmp1 = tmp1 + (last_discrepancy[j] << j);
					tmpd1 = tmpd1 - code_arithmetic::GF256_list_to_power[tmp1 - 1]; // b^-1

					for (int tl = tm; tl < max_word_length; tl++)
					{
						tmp1 = 0;
						for (int j = 0; j < 8; j++)
							tmp1 = tmp1 + (poly_b[tl - tm][j] << j);
						if (tmp1 == 0)
							continue;

						tmpd2 = (tmpd1 + code_arithmetic::GF256_list_to_power[tmp1 - 1] - 1) % 255 + 1; // B_{tl-m}
						if (tmpd2 < 0)
							tmpd2 = tmpd2 + 255;

						for (int j = 0; j < 8; j++)
							poly_c[tl][j] = poly_c[tl][j] ^ code_arithmetic::GF256[tmpd2 - 1][j];
					}
				}

				if (nc == 511)
				{
					tmpd1 = code_arithmetic::GF256_list_to_power[tmp2 - 1]; // d

					tmp1 = 0;
					for (int j = 0; j < 9; j++)
						tmp1 = tmp1 + (last_discrepancy[j] << j);
					tmpd1 = tmpd1 - code_arithmetic::GF512_list_to_power[tmp1 - 1]; // b^-1

					for (int tl = tm; tl < max_word_length; tl++)
					{
						tmp1 = 0;
						for (int j = 0; j < 9; j++)
							tmp1 = tmp1 + (poly_b[tl - tm][j] << j);
						if (tmp1 == 0)
							continue;

						tmpd2 = (tmpd1 + code_arithmetic::GF512_list_to_power[tmp1 - 1] - 1) % 511 + 1; // B_{tl-m}
						if (tmpd2 < 0)
							tmpd2 = tmpd2 + 511;

						for (int j = 0; j < 9; j++)
							poly_c[tl][j] = poly_c[tl][j] ^ code_arithmetic::GF512[tmpd2 - 1][j];
					}
				}

				tm = tm + 1;
			}
		}

		// Step 3: determine the error locator. c(x) = (1-c1 x)...(1-cl x), l=num_of_errors
		/*try a^(nc-1), ... ,a^0*/

		int sumtmp[9];
		int errorlocation[max_word_length];
		int indicator = 0;

		for (int i = 1; i <= nc; i++)
		{

			if (indicator >= num_of_errors)
				break;

			for (int j = 0; j <= 8; j++)
				sumtmp[j] = 0;

			/*compute c(a^i) = sum(c_j*a^ij)*/
			for (int j = 0; j <= num_of_errors; j++)
			{

				/*c_j*/
				tmp1 = tmp2 = 0;
				for (int tj = 0; tj < 8; tj++)
					tmp1 = tmp1 + (poly_c[j][tj] << tj);
				tmp2 = tmp1 + (poly_c[j][8] << 8);

				if ((nc == 255 && tmp1 == 0) || (nc == 511 && tmp2 == 0))
					continue;

				/*compute c_j*(a^i)^j*/
				if (nc == 255)
				{
					tmpd1 = (code_arithmetic::GF256_list_to_power[tmp1 - 1] + i * j - 1) % nc + 1;

					for (int tj = 0; tj < 8; tj++)
						sumtmp[tj] = sumtmp[tj] ^ code_arithmetic::GF256[tmpd1 - 1][tj];
				}
				if (nc == 511)
				{
					tmpd2 = (code_arithmetic::GF512_list_to_power[tmp2 - 1] + i * j - 1) % nc + 1;

					for (int tj = 0; tj < 9; tj++)
						sumtmp[tj] = sumtmp[tj] ^ code_arithmetic::GF512[tmpd2 - 1][tj];
				}
			}

			/*check if c(a^i) is zero*/
			tmp1 = tmp2 = 0;
			for (int tj = 0; tj < 8; tj++)
				tmp1 = tmp1 + (sumtmp[tj] << tj);
			tmp2 = tmp1 + (sumtmp[8] << 8);

			if (nc == 255 && tmp1 == 0)
			{
				errorlocation[indicator] = 255 - i;
				indicator++;
			}
			if (nc == 511 && tmp2 == 0)
			{
				errorlocation[indicator] = 511 - i;
				indicator++;
			}
		}

		/*flip the corresponding bit*/
		for (int i = 0; i < num_of_errors; i++)
			m[errorlocation[i]] = m[errorlocation[i]] ^ 1;

		// reclaim the memery
		delete[] S;

		return 0;
	}

	int grayMap(unsigned int *m, int lm, unsigned int *encodedMessage, int lem) // lm is required to be 3*lem
	{
		if (lm > 3 * lem)
		{
			cout << "error: gray map length invalid!" << endl;
			return -1;
		}

		int tmpl = lm / 3;
		int tmpr = lm % 3;

		for (int i = 0; i < tmpl; i++)
			encodedMessage[i] = code_arithmetic::grayCode[m[3 * i] + 2 * m[3 * i + 1] + 4 * m[3 * i + 2]];

		if (tmpr == 0)
			for (int i = tmpl; i < lem; i++)
				encodedMessage[i] = 0;
		else if (tmpr == 1)
		{
			encodedMessage[tmpl] = code_arithmetic::grayCode[m[3 * tmpl]];
			for (int i = tmpl + 1; i < lem; i++)
				encodedMessage[i] = 0;
		}
		else if (tmpr == 2)
		{
			encodedMessage[tmpl] = code_arithmetic::grayCode[m[3 * tmpl + 2 * m[3 * tmpl + 1]]];
			for (int i = tmpl + 1; i < lem; i++)
				encodedMessage[i] = 0;
		}

		return 0;
	}

	int inverseGrayMap(unsigned int *encodedMessage, int lem, unsigned int *m, int lm)
	{
		if (lm > 3 * lem)
		{
			cout << "error: inverse gray map length invalid!" << endl;
			return -1;
		}

		int tmpl = lm / 3;
		int tmpr = lm % 3;

		for (int i = 0; i < tmpl; i++)
			for (int j = 0; j < 3; j++)
				m[3 * i + j] = code_arithmetic::inverseGrayCode[encodedMessage[i]][j];

		for (int j = 1; j <= tmpr; j++)
			m[3 * tmpl + j - 1] = code_arithmetic::inverseGrayCode[encodedMessage[tmpl]][j - 1];

		return 0;
	}

}

int messageEnc(unsigned int *m, unsigned int *encodedMessage, int seclev = FAST, int lm = 128) // input a message m, output the encoded message according to the secure level seclev and the message length lm
{
	// step 0: define parameters
	int logq;
	int mn;
	int binaryEncodedMessageLength;
	unsigned int *genpoly;
	int dgen;
	if (seclev == FAST)
	{
		switch (lm)
		{
		case 128:
			logq = 14;
			mn = 7 * 8;
			binaryEncodedMessageLength = 168;
			genpoly = code_arithmetic::g_n255d11;
			dgen = code_arithmetic::d_n255d11;
			break;
		case 192:
			logq = 14;
			mn = 8 * 12;
			binaryEncodedMessageLength = 282;
			genpoly = code_arithmetic::g_n511d21;
			dgen = code_arithmetic::d_n511d21;
			break;
		case 256:
			logq = 15;
			mn = 9 * 11;
			binaryEncodedMessageLength = 292;
			genpoly = code_arithmetic::g_n511d9;
			dgen = code_arithmetic::d_n511d9;
			break;
		case 384:
			logq = 15;
			mn = 12 * 13;
			binaryEncodedMessageLength = 465;
			genpoly = code_arithmetic::g_n511d19;
			dgen = code_arithmetic::d_n511d19;
			break;
		default:
			cout << "error: invalid message length!";
			return -1;
		}
	}
	else if (seclev == SECURE)
	{
		switch (lm)
		{
		case 128:
			logq = 16;
			mn = 6 * 9;
			binaryEncodedMessageLength = 152;
			genpoly = code_arithmetic::g_n255d7;
			dgen = code_arithmetic::d_n255d7;
			break;
		case 192:
			logq = 17;
			mn = 8 * 9;
			binaryEncodedMessageLength = 216;
			genpoly = code_arithmetic::g_n255d7;
			dgen = code_arithmetic::d_n255d7;
			break;
		case 256:
			logq = 18;
			mn = 8 * 12;
			binaryEncodedMessageLength = 283;
			genpoly = code_arithmetic::g_n511d7;
			dgen = code_arithmetic::d_n511d7;
			break;
		case 384:
			logq = 19;
			mn = 10 * 14;
			binaryEncodedMessageLength = 411;
			genpoly = code_arithmetic::g_n511d7;
			dgen = code_arithmetic::d_n511d7;
			break;
		default:
			cout << "error: invalid message length! Supported lengths include 128, 192, 256 and 384.";
			return -1;
		}
	}
	else
	{
		cout << "error: invalid secure level! Pls set it to FAST or SECURE then try again!";
		return -1;
	}

	// step 1: apply the binary code encoding
	unsigned int binaryEncodedMessage[max_word_length] = {0};
	int dBinaryEncodedMessage;

	// cout << "message:" << endl;
	// for (int i = 0; i < lm; i++)
	// 	cout << m[i] << ", ";
	// cout << endl
	// 		 << endl;
	testEncode(m, lm, binaryEncodedMessage, binaryEncodedMessageLength);

	// code_arithmetic::encoder(genpoly, dgen, m, lm - 1, binaryEncodedMessage, dBinaryEncodedMessage);

	/*
	LDPCEncoder(m,binaryEncodedMessageLength,lm,fragsize,encodedMessage);
	//��ǰ�������⣬
	/*DEBUG*/

	// cout << "encoded message:" << endl;
	// for (int i = 0; i < binaryEncodedMessageLength; i++)
	// 	cout << binaryEncodedMessage[i] << ", ";
	// cout << endl
	// 		 << endl;

	/*DEBUG*/

	// setp 2: apply the gray map
	code_arithmetic::grayMap(binaryEncodedMessage, binaryEncodedMessageLength, encodedMessage, mn);

	/*DEBUG*/

	// cout << "after gray code:" << endl;
	// for (int i = 0; i < mn; i++)
	// 	cout << encodedMessage[i] << ", ";
	// cout << endl
	// 		 << endl;

	/*DEBUG*/

	// step 3: scale by q/8
	for (int i = 0; i < mn; i++)
		encodedMessage[i] = (encodedMessage[i] << (logq - 3));

	/*DEBUG*/

	// cout << "final message:" << endl;
	// for (int i = 0; i < mn; i++)
	// 	cout << encodedMessage[i] << ", ";
	// cout << endl
	// 		 << endl;

	/*DEBUG*/

	return 0;
}

int messageDec(unsigned int *encodedMessage, unsigned int *m, int seclev = FAST, int lm = 128) // input a coded message with errors, output the corrected binary message according to the secure level seclev and the message length lm
{
	// step 0: define parameters
	int logq;
	int mn;
	int binaryEncodedMessageLength;
	unsigned int *genpoly;
	int dgen;
	int codelength;
	int decodingradius;

	if (seclev == FAST)
		switch (lm)
		{
		case 128:
			logq = 14;
			mn = 7 * 8;
			binaryEncodedMessageLength = 168;
			genpoly = code_arithmetic::g_n255d11;
			dgen = code_arithmetic::d_n255d11;
			codelength = 255;
			decodingradius = 5;
			break;
		case 192:
			logq = 14;
			mn = 8 * 12;
			binaryEncodedMessageLength = 282;
			genpoly = code_arithmetic::g_n511d21;
			dgen = code_arithmetic::d_n511d21;
			codelength = 511;
			decodingradius = 10;
			break;
		case 256:
			logq = 15;
			mn = 9 * 11;
			binaryEncodedMessageLength = 292;
			genpoly = code_arithmetic::g_n511d9;
			dgen = code_arithmetic::d_n511d9;
			codelength = 511;
			decodingradius = 4;
			break;
		case 384:
			logq = 15;
			mn = 12 * 13;
			binaryEncodedMessageLength = 465;
			genpoly = code_arithmetic::g_n511d19;
			dgen = code_arithmetic::d_n511d19;
			codelength = 511;
			decodingradius = 9;
			break;
		default:
			cout << "error: invalid message length!";
			return -1;
		}
	else if (seclev == SECURE)
		switch (lm)
		{
		case 128:
			logq = 16;
			mn = 6 * 9;
			binaryEncodedMessageLength = 152;
			genpoly = code_arithmetic::g_n255d7;
			dgen = code_arithmetic::d_n255d7;
			codelength = 255;
			decodingradius = 3;
			break;
		case 192:
			logq = 17;
			mn = 8 * 9;
			binaryEncodedMessageLength = 216;
			genpoly = code_arithmetic::g_n255d7;
			dgen = code_arithmetic::d_n255d7;
			codelength = 255;
			decodingradius = 3;
			break;
		case 256:
			logq = 18;
			mn = 8 * 12;
			binaryEncodedMessageLength = 283;
			genpoly = code_arithmetic::g_n511d7;
			dgen = code_arithmetic::d_n511d7;
			codelength = 511;
			decodingradius = 3;
			break;
		case 384:
			logq = 19;
			mn = 10 * 14;
			binaryEncodedMessageLength = 411;
			genpoly = code_arithmetic::g_n511d7;
			dgen = code_arithmetic::d_n511d7;
			codelength = 511;
			decodingradius = 3;
			break;
		default:
			cout << "error: invalid message length! Supported lengths include 128, 192, 256 and 384.";
			return -1;
		}
	else
	{
		cout << "error: invalid secure level! Pls set it to FAST or SECURE then try again!";
		return -1;
	}

	// step 1:divide the coded message by q/8 then rounding
	unsigned int z8Message[max_word_length];
	for (int i = 0; i < mn; i++)
	{
		z8Message[i] = (encodedMessage[i] >> (logq - 3));
		if (encodedMessage[i] - (z8Message[i] << (logq - 3)) >= (1 << (logq - 4)))
			z8Message[i]++;
		z8Message[i] = z8Message[i] % 8;
	}

	/*DEBUG*/

	// cout << "divide q/8:" << endl;
	// for (int i = 0; i < mn; i++)
	// 	cout << z8Message[i] << ", ";
	// cout << endl
	// 		 << endl;

	/*DEBUG*/

	unsigned int binaryEncodedM[max_word_length];
	// step 2: reconstruct the binary message via the inverse Gray map
	code_arithmetic::inverseGrayMap(z8Message, mn, binaryEncodedM, binaryEncodedMessageLength);

	/*DEBUG*/

	// cout << "after inverse gray code:" << endl;
	// for (int i = 0; i < binaryEncodedMessageLength; i++)
	// 	cout << binaryEncodedM[i] << ", ";
	// cout << endl
	// 		 << endl;
	testDecode(binaryEncodedM, binaryEncodedMessageLength, m, lm);
	/*DEBUG*/

	// step 3: employ the binary decoder
	// code_arithmetic::decoder(genpoly, binaryEncodedM, codelength, dgen, binaryEncodedMessageLength - 1, decodingradius);

	// for (int i = 0; i<lm; i++)
	//	m[i] = binaryEncodedM[i + dgen];

	/*DEBUG*/

	// cout << "final decoded message:" << endl;
	// for (int i = 0; i < lm; i++)
	// 	cout << m[i] << ", ";
	// cout << endl;

	/*DEBUG*/

	return 0;
}
